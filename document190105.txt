<classes for main method and creating window for application>
* main.DigitalCircuitSimulator
- main method가 있다.
- main method에서는 화면 출력 알고리즘을 구현한다. (FPS를 결정)
- window instace를 만든 뒤 window의 render 메소드를 호출
- 초당 render 메소드가 출력된 횟수를 FPS로 결정한다.

* window.Window
- extends JFrame
- 창의 크기를 결정
- render method에서는 WorkSpase instance를 생성한 뒤 WorkSpace의 render method를 호출

* window.WorkSpace
- extends Canvas (simillar to JFrame, one can use BufferStrategy)
- implements Key, Mouse, MouseMotion Listener
- in render method one can draw various components (strings) and calls paintComponent to draw more components(ovals, lines etc)
- paintComponent draws logical devices and nodes by drawing ovals, lines
- has ArrayList (Element, GateIO, Node)
- ArrayList collects data of logical device and node
- has mouse position data(to drag or select components), offset(to move screen vertically and horizontally)

<data of logical devices>
* main.Element (abstract)
- super class of all logical devices
- has location of logical device(coordx, coordy)
- has status of logical device(containing, selected) indicates whether logic gate is mouse overed or selected
- has rectangular boundary (bound)
- paint boundary of logic gate
- provides drawing tools for classes who extends this class(drawLine, drawArc)
- see if mouse in the boundary

* main.AndGate, OrGate
- extends Element
- has GateIO (input and output)
- paint method draws element
- provides delete and move
- manages gateIO (remove data fom workspace when gate is deleted change positon when moved)

* main.GateIO
- does not extends Element!
- provides interface between node and logic gates
- must be deprecated for code simplicity

* main.Node
- does not extends Element!
- collects data of one node
- has ArrayList of node lines
- indicates various status of node
- has instance of WorkSpce to get mouse position -> looks inefficient, WorkSpace must provide efficient way to get mouse position -> can solve problem by editing WorkSpace's mouseMoved method add for loop to give mouse position to node

* main.NodeLine
- has position data of lines which builds node
- position data means start coordicate, end coordinate, all points between start and end coordinate
- only supports straight line

<method related to mouse action>
- implemented in the window.WorksSpace
- there are 5 methods (mousePressed, mouseReleased, mouseClicked, mouseMoved, mouseDragged)
- mouseMoved is called when mouse is moving and no mouse button is down. So this method is called hundreds of time causing heavy load to computer
- mouseDragged is called when mouse button is down and also mouse is moving(any button is available)
- mouseMoved is never called when any of mouse button is pressed
- when mouse is clicked 3 methods are called in following order mousePressed -> mouseReleased -> mouseClicked
- mouseClicked is never called when mouseDragged is called between mousePressed and mouseReleased. So one need precise mouse controll to call mouseClicked. (Click carefully!)

<algorithm for multiselect using dragbox>
- now service has been paused to find bugs(ver. 190102)
- uses field mx, my, dx, dy, dragBox
- dragBox is a rectangle
- mx, my are updated when mouseMoved is called
- dx, dy are updated when mouseDragged is called
- Using the fact that mouseMoved is not called during the drag, mx, my are used as a upper left point of dragBox and dx, dy are used as a lower right point of dragbox
- width and height are driven by calculating (mx - dx) and (my - dy)
- upper left point can be replaced to dx, dy by choosing a point which is close to origin point


<algorithm for node handling>
- generate new node when gate io is clicked. WorkSpace changes its mode.
- detects the point where the mouse is clicked.
- calls already existing node when nodeline is clicked
- generese new node when gate io is clicked -> bug when gate io is clicked and gateio is already connected to another node
- delete not supported
- can't move position of nodeline

<algorithm for handling data of gate logic and nodes>

<key input map>
- make OR gate (1)
- make AND gate (2)
- zoom in (arrow UP)
- zoom out (arrow DOWN)
- hide strings (H)


